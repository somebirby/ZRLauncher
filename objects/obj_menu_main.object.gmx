<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// TODO: Clean this up?

menu_start_x = 30;  // Left position for mod items
menu_y = 45;        // Space between mod items
button_h = 32;
button_w = 150;



button = ds_list_create();

// Refresh folder path vars from config file
read_config_file();
// Seek mod file names and fill the button array with them
refresh_mod_list();
// Variables for menu navigation
selected_col = 0;
if ds_list_size(button) == 0 {
    selected_row = 1;
} else { selected_row = 0; }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//grab_last_connected_controller();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Handles navigation

grab_inputs();

var button_list_size = ds_list_size(button);

// Check for pressed inputs
if (key_down) {     // If nav.down is pressed
    if (selected_row == 0 &amp;&amp; selected_col == button_list_size - 1) {
        selected_row = 1; // Move to the Options button
        selected_col = 0;
    } else if (selected_row == 0 &amp;&amp; selected_col &lt; button_list_size) {
        selected_col++; // Move down within the main menu items
    } else if (selected_row == 1 &amp;&amp; button_list_size &gt; 0) {
        selected_row = 0; // Move to the top mod button
        selected_col = 0;
    } 
}

if (key_up) {       // If nav. up is pressed
    if (selected_row == 1 &amp;&amp; button_list_size &gt; 0) {
        selected_row = 0;   // Move up to bottom of the mod list
        selected_col = button_list_size- 1;
    } else if (selected_row == 0 &amp;&amp; selected_col &gt; 0) {
        selected_col--; // Move down to the bottom bar
    } else if (selected_row == 0 &amp;&amp; selected_col == 0) {
        selected_row++;
    }
}

if (key_right) {    // If nav.right is pressed
    if (selected_col == 2 &amp;&amp; selected_row == 1) {
        selected_col = 0;
    } else if (selected_row == 1) {
        selected_col++; // Go right
    }
}

if (key_left) {     // If nav.left is pressed
    if (selected_col == 0 &amp;&amp; selected_row == 1) {
        selected_col = 2;
    } else if (selected_row == 1) {
        selected_col--; // Go left
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Handles mod select / menu selection

grab_inputs();

// Check for pressed input
if (key_confirm == true) {
    // If bottom bar is selected
    if (selected_row == 1) {
        switch (selected_col) {
            case 0: // Vanilla
                // Launch the vanilla game
                execute_shell_simple(global.zr_exe_path, "");
                break;
            case 1: // Options
                // Switch to the Options menu
                instance_create(0,0,obj_menu_options);
                instance_destroy();
                break;            
            case 2: // Exit
                // Exit the game
                game_end();
                break;
            default:
                // uhoh
                // Maybe make that a script like "report_error(debug_value1, debug_value2, ...)"
                show_message("CONGRATS YOU WON a free ticket to @somebirby in \#modding-discussion-zr!!! Send a screenshot of the next pop-up with the launcher's windows.");
                show_message(string(selected_row) + " " + string(selected_col));
                break;
        }
    } else if (!ds_list_empty(global.mod_list)) {  // If not, we're assuming it's a mod button)
        var selected_item = button[| selected_col];
        launch_mod(selected_item);
        
        // TODO: Close after launch Option
        if(0) { game_end(); }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Handles extra functions
// TODO: Redo F1, F2, F5, and Escape key events here, with gamepad support
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// ARCHIVE of keyboard event "pressed ENTER"

switch(menu_index) {
    case -2:    // Options Button
        show_debug_message("SHOW OPTIONS");
        // Options menu open here
        break;
    case -1:    // Exit button
        game_end();
        break;
    default:    // Any other button (which we're assuming would only be mods)
        launch_mod(menu_index);
        game_end();
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="24">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Sxxxxx COMMUNITY MENU CREATE EVENT

if !(ds_list_empty(global.mod_list)){n_of_buttons = ds_list_size(global.mod_list);} else {n_of_buttons = 1;};
var space = (view_wview[0] * 0.3) / 3;
var menu_object_width = (view_wport[0] - (3 * space)) / 2;
n_of_buttons = 4;
create_menu(n_of_buttons, menu_object_width, menu_object_width, space, space, space, space);

/////////////////////////////////////////////////
/////////////////////////////////////////////////

//Sxxxxx COMMUNITY MENU STEP EVENT
// Get the number of menu items

var num_items = instance_number(obj_menu_item);
//show_debug_message("Number of menu items: " + num_items);
// Initialize variables for navigation
var current_item = 0;
var selected_item = -1;

// Loop through all menu items to find the currently selected one
for (var i = 1; i &lt; num_items; i++) {
    var item = instance_find(obj_menu_item, i);
    if (item.selected) {
        current_item = i;
        break;
    }
}

// Handle keyboard input for navigation
if (keyboard_check_pressed(vk_down)) {
    current_item = (current_item + 1) % num_items;
}
if (keyboard_check_pressed(vk_up)) {
    current_item = (current_item - 1 + num_items) % num_items;
}
if (keyboard_check_pressed(vk_right)) {
    current_item = (current_item + 2) % num_items;
}
if (keyboard_check_pressed(vk_left)) {
    current_item = (current_item - 2 + num_items) % num_items;
}

// Handle selection (Enter key)
if (keyboard_check_pressed(vk_enter)) {
    selected_item = current_item;
}

//num_items = num_items - num_items - num_items;
// Update the selected state of the menu items
for (var i = 0; i &lt; num_items; i++) {
    var item = instance_find(obj_menu_item, i);
    item.selected = (i == current_item);
    if (i == current_item) {
        item.image_index = 1;
    } else {
        item.image_index = 0;
    };
}

// If an item was selected, trigger its script using a switch case
if (selected_item != -1) {
    switch (selected_item) {
        case 0:
            // Script for item 0
            show_message("Item 0 selected!");
            // Add your custom logic here
            break;
        case 1:
            // Script for item 1
            show_message("Item 1 selected!");
            // Add your custom logic here
            break;
        case 2:
            // Script for item 2
            show_message("Item 2 selected!");
            // Add your custom logic here
            break;
        // Add more cases as needed
        default:
            // Default case (optional)
            show_message("Default item selected!");
            // Add your custom logic here
            break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>obj_menu_main</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(font1);
draw_set_color(global.color_not_sel);
draw_set_halign(fa_left);

// Draw the main menu items
for (var i = 0; i &lt; ds_list_size(button); i++) {
    var text = button[| i];
    // Check for ".win" at the end of the filename, and remove it
    // In theory every entry should have a .win
    //show_message(string(string_pos(".win", text)) + " VS " + string(string_length(text)));
    if (string_pos(".win", text) == string_length(text) - 3) {

        text = string_delete(text, string_length(text) - 3, 4);
    }
    var y_pos = menu_y + button_h * i;      // Adjust y position based on row
    if (selected_row == 0 &amp;&amp; i == selected_col) {
        draw_set_color(global.color_selected);     // Highlight selected item
    } else {
        draw_set_color(global.color_not_sel);
    }
    draw_text(menu_start_x, y_pos, text);
}


// Draw the Options and Exit buttons at the bottom of the viewport
var vanilla_text = "Vanilla";
var options_text = "Options";
var exit_text = "Exit";
var vanilla_x = 15; // Left position for Vanilla
var options_x = room_width / 2 - 50; // Middle-ish of the viewport for Options
var exit_x = room_width - 90; // Right position for Exit
var bottom_y = room_height - 45; // Position at the bottom of the viewport


// TODO: Redo the bottom bar draw to something more efficient &amp; compact
// Draw Vanilla button
if (selected_row == 1 &amp;&amp; selected_col == 0) {
    draw_set_color(global.color_selected); // Highlight selected item
} else {
    draw_set_color(global.color_not_sel);
}
draw_text(vanilla_x, bottom_y, vanilla_text);

// Draw Options button
if (selected_row == 1 &amp;&amp; selected_col == 1) {
    draw_set_color(global.color_selected); // Highlight selected item
} else {
    draw_set_color(global.color_not_sel);
}
draw_text(options_x, bottom_y, options_text);

// Draw Exit button
if (selected_row == 1 &amp;&amp; selected_col == 2) {
    draw_set_color(global.color_selected); // Highlight selected item
} else {
    draw_set_color(global.color_not_sel);
}
draw_text(exit_x, bottom_y, exit_text);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Draw debug

//draw_text(room_width - 315, room_height - 200 + (button_h * 2),   "l.size = " + string(ds_list_size(button)));
//draw_text(room_width - 315, room_height - 200 + button_h,   "row = " + string(selected_row));
//draw_text(room_width - 315, room_height - 200 ,             "col = " + string(selected_col));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="116">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Manual seeking of mod list
refresh_mod_list();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="113">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Launch ZR unmodded, just in case?
execute_shell_simple(global.zr_exe_path, "");
//game_end;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
